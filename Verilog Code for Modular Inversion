‘define Init 0 //state
‘define ModInv 1 //state
‘define Final 2 //state
module ModInv(clk, A, B, p, start, busy);
input [127:0] A, p;
input start, clk;
output [127:0] B;
output busy;
reg [127:0] u, v, x, y, B;
reg [1:0] state;
reg busy;
wire [128:0] Reg1, Reg2, Reg3, Reg4;
assign Reg1 = u - v;
assign Reg2 = x - y;
assign Reg3 = x + p;
assign Reg4 = y + p;
always @(posedge clk or negedge start) begin
if (!start) begin // Ready
busy <= 0;
state <= ‘Init;
end else begin
if (state == ‘Init) begin // Initialization
busy <= 1;
u <= A;
v <= p;
x <= 256’d1;
y <= 256’d0;
state <= ‘ModInv;
end else if (state == ‘ModInv) begin
if ((u != 1) && (v != 1)) begin
if (u[0] == 0) begin
u <= {1’b0, u[127:1]};
x <= (x[0]) ? Reg3[128:1] : {1’b0, x[127:1]};
end
if (v[0] == 0) begin
v <= {1’b0, v[127:1]};
y <= (y[0]) ? Reg4[128:1] : {1’b0, y[127:1]};
end
if ((u[0]) && (v[0])) begin
if (Reg1[128]) begin
v <= (v - u);
y <= (Reg2[128]) ? (y - x) : (y - x + p);
end else begin
u <= (u - v);
x <= (Reg2[128]) ? (x - y + p) : (x - y);
end
end
end else begin
B <= (u == 1) ? x : y;
state <= ‘Final;
end
end else begin
busy <= 0; // Final state
end
end
end
endmodule

#A mod M = inverse of A 
• A = 6058769910174887647
• M = 17875407417517141167

