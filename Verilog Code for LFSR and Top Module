module lfsr_4 #(parameter seed=4’b1001)
(input clk, input rst_n, input i_enable, output [3:0] o_lfsr);
reg [3:0] lfsr;
wire feedback;
// Create the x^4 + x + 1 feedback
assign feedback = lfsr[3] ^ lfsr[0];
always @(posedge clk or negedge rst_n)
begin
if (!rst_n)
lfsr <= seed;
else if (i_enable)
lfsr <= {lfsr[2:0], feedback};
end
assign o_lfsr = lfsr;
endmodule
module top_module (
output [3:0] o_lfsr,
input clk, i_enable,
input rst_n
);
// Instantiate the LFSR module
lfsr_4 #(4’b1001) lfsr_inst (
.o_lfsr(o_lfsr),
.clk(clk),
.rst_n(rst_n),
.i_enable(i_enable)
);
endmodule

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
*******************************************//////////////////

module DisplayBox(input wire [3:0] SW,
output wire [6:0] a_to_g,
output wire [3:0] an,
output wire dp);
hex_to_7_segment D1(.in(SW),.a_to_g(a_to_g));
assign an=4’b0001;//
assign dp=1;
endmodule
module hex_to_7_segment
(input wire [3:0] in,
output reg [6:0] a_to_g);
always @(*) begin
case (in) // abcdefg
’h0: a_to_g = 7’b0000001;
’h1: a_to_g = 7’b1001111;
’h2: a_to_g = 7’b0010010;
’h3: a_to_g = 7’b0000110;
’h4: a_to_g = 7’b1001100;
’h5: a_to_g = 7’b0100100;
’h6: a_to_g = 7’b0100000;
’h7: a_to_g = 7’b0001111;
’h8: a_to_g = 7’b0000000;
’h9: a_to_g = 7’b0000100;
’hA: a_to_g = 7’b0001000;
’hB: a_to_g = 7’b1100000;
’hC: a_to_g = 7’b0110001;
’hD: a_to_g = 7’b1000010;
’hE: a_to_g = 7’b0110000;
’hF: a_to_g = 7’b0111000;
default: a_to_g = 7’b0000001; // 0
endcase
end
endmodule

///////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////



module lfsr_tb_4();
    reg clk = 0;
    reg rst_n;
    reg enable;
    wire [3:0] lfsr;
    integer success_count = 0;
    integer error_count = 0;
    integer test_count = 0;
    parameter seed = 4'b1001;

    lfsr_4 #(.seed(seed)) LFSR0 (.clk(clk), .rst_n(rst_n), .i_enable(enable), .o_lfsr(lfsr));

    always begin
        #10 clk = ~clk;
    end

    initial begin
        #10; rst_n = 0; enable = 0;
        #10; rst_n = 1;
        repeat(2) @(posedge clk);
        compare_data(seed, lfsr, 1);
        enable = 1;

        // Testbench Logic
        repeat(3) begin
            repeat(14) begin
                @(posedge clk);
                compare_data(seed, lfsr, 0);
            end
            @(posedge clk);
            compare_data(seed, lfsr, 0);

            enable = 0;
            repeat(25) @(posedge clk);
            enable = 1;
        end
        $display($time, "FINAL TEST REPORT: test_count=%d, success_count=%d, error_count=%d", test_count, success_count, error_count);
        enable = 0;
        #100 $stop;
    end

    task compare_data(input [3:0] expected_data, input [3:0] observed_data, input is_equal);
        begin : cmp_data
            if (is_equal) begin
                if (expected_data === observed_data) begin
                    $display($time, "success \t expected_data=%x, observed_data=%x", expected_data, observed_data);
                    success_count = success_count + 1;
                end else begin
                    $display($time, "failure \t expected_data=%x, observed_data=%x", expected_data, observed_data);
                    error_count = error_count + 1;
                end
            end else begin
                if (expected_data !== observed_data) begin
                    $display($time, "success \t expected_data=%x, observed_data=%x", expected_data, observed_data);
                    success_count = success_count + 1;
                end else begin
                    $display($time, "failure \t expected_data=%x, observed_data=%x", expected_data, observed_data);
                    error_count = error_count + 1;
                end
            end
            test_count = test_count + 1;
        end : cmp_data
    endtask

endmodule

